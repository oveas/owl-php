<?php
/**
 * \file
 * This file defines the base for webbased TT development
 * \author Oscar van Eijk, Oveas Functionality Provider
 */

/**
 * \ingroup TT_TTADMIN
 * Developer class.
 * \brief Development tools
 * \author Oscar van Eijk, Oveas Functionality Provider
 * \version Jun 10, 2013 -- O van Eijk -- initial version
 */
class Developer extends _TT
{
	private $appName;
	private $appCode;
	private $appDesc;
	private $tempDir;
	private $dirObject;
	
	/**
	 * Object constructor
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 */
	public function __construct()
	{
		$this->ttLocation = TT_ROOT;
	}
	
	/**
	 * Show the form to generate a new application
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 */
	public function showCreateAppForm()
	{
		if (($_lnk = TTloader::getArea('developer', TTADMIN_UI . '/developer', null)) !== null) {
			$_lnk->addToDocument(TTCache::get(TTCACHE_OBJECTS, 'BodyContainer'));
		}
	}

	/**
	 * Generate an TT application using the data taken from the form
	 * \return True on success
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 */
	public function generateApplic ()
	{
		if (!TTloader::getClass('dirhandler')) {
			trigger_error('Error loading the Dirhandler class', E_USER_ERROR);
		}
		
		$_form = TT::factory('FormHandler');
		$this->appName = $_form->get('nam');
		$this->appCode = strtoupper($_form->get('cod'));
		$this->appDesc = $_form->get('descr');
		
		$this->tempDir = TT_TEMP . '/tt-' . strtolower($this->appCode);

		$this->dirObject = new DirHandler($this->tempDir, false);
		$this->dirObject->create();

		// Create subdirectories
		$this->dirObject->createSub('admin');
		$this->dirObject->createSub('style');
		$this->dirObject->createSub('lib');
		$this->dirObject->createSub('plugins');
		$this->dirObject->createSub('bo');
		$this->dirObject->createSub('so');
		$this->dirObject->createSub('ui');
		
		$this->createIndex();
		$this->createConfig();
		$this->createInstaller();
		$this->createLabels();
		$this->createMessages();
		$this->createMainpage();
		$this->createStyleSheet();
		$this->createMainMenu();
		$this->createUserMenu();
		$this->createLoginArea();
		$this->createUserClass();
		$this->createLoader();
		
		$_archive = $this->dirObject->zipFolder($this->appCode);
		$this->dirObject->remove(true);
		$_archive->downloadFile();
		$_archive->remove();
		echo "Done!";
	}

	/**
	 * Helper method to write a new file with the specified content
	 * \param[in] $_name Name of the file with the path relative from the temp location
	 * \param[in] $_content Complete file content
	 * \author Oscar van * \author Oscar van Eijk, Oveas Functionality Provider
	 Eijk, Oveas Functionality Provider
	 */
	private function createNewFile($_name, $_content)
	{
		$_newFile = new FileHandler($this->tempDir . $_name, false);
		$_newFile->open('wb');
		$_newFile->write($_content);
		$_newFile->close();
	}

	/**
	 * Create the file header
	 * \param[in] $comment  Line comment. Defaults to PHP comment (//), but wilt be ';' for the config file
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 * \todo Create a header that makes sense...
	 */
	private function createFileHeader($comment = '//')
	{
		return "$comment *****
$comment This file is generated by the TT Developers class.
$comment
";
	}
	
	/**
	 * Create this application's entry point
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 */
	private function createIndex ()
	{
		$_fileContent = "<?php
" . $this->createFileHeader() . "
error_reporting (E_ALL | E_STRICT);

define ('TT_ROOT', '" . TT_ROOT . "');
define ('APP_CONFIG_FILE', '" . TT_SITE_TOP . "/tt-" . strtolower($this->appCode) . "/" .strtolower($this->appCode) . ".cfg');

require (TT_ROOT . '/TTloader.php');
TTloader::loadApplication('$this->appCode');

require (TTloader::getCurrentAppLib() . '/" .strtolower($this->appCode) . ".loader.php');
require (".$this->appCode."_UI . '/mainpage.php');

TTloader::getClass('TTrundown.php', TT_ROOT);
";
		$this->createNewFile('/index.php', $_fileContent);
	}

	/**
	 * Write the configuration file for this applic
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 */
	private function createConfig ()
	{
		$_fileContent = $this->createFileHeader(';') . "[logging]
	filename = TT_LOG/" .strtolower($this->appCode) . ".log
	log_level = TT_DEBUG
	; Set trace level >= exception:throw_level below to disable tracing in the logfile
	trace_level = TT_BUG

[exception]
	show_in_browser = true
	show_values = true
	max_value_len = 25
	throw_level = TT_ERROR
	
[layout]
	menutype = Slider
";
		$this->createNewFile('/' . strtolower($this->appCode) . '.cfg', $_fileContent);
	}

	/**
	 * Create a default installer.
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 */
	private function createInstaller ()
	{
		$_fileContent = "<?php
" . $this->createFileHeader() . "
define ('TT_ROOT', '" . TT_ROOT . "');	// TT Root *must* be defined here.
require (TT_ROOT . '/TTinstaller.php');	// Load the TT Installer class

// This creates the application in the TT database
//
\$_id = TTinstaller::installApplication(
	  '$this->appCode'		// Application code
	, '/tt-" . strtolower($this->appCode) . "'		// Relative URL to the application
	, '$this->appName'		// Application name
	, 'A1.0'		// Version numner
	, '$this->appDesc'		// Description
	, 'http://localhost/tt-" . strtolower($this->appCode) . "'		// URL to the application developer's site
	, ' " . "" /* TODO fetch username */ . "'		// Author or maintainer
	, ''			// Application license
);

// These configuration items are used before the configuration file is parsed, so the application's defaults
// are taken from the database.
// Except for the db table prefix (of course...), all items can be overwritten in the config file.
//
TTinstaller::addConfig(\$_id, 'general', 'js_signal', true);
TTinstaller::addConfig(\$_id, 'database', 'prefix', '$this->appCode', true);
TTinstaller::addConfig(\$_id, 'locale', 'lang', 'nl-NL');

// Some example privileges for this application. Add as many as you like.
//
TTinstaller::addRights(\$_id
	,array(
		 'lurk'			=> 'Can read information provided by $this->appName'
		,'changeconfig'	=> 'Can change the $this->appName configuration'
	)
);

// Some example groups for this application. Add as manuy as you like.
//
TTinstaller::addGroups(\$_id
	,array(
		 '$this->appCode admin'		=> '$this->appName administrators'
		,'$this->appCode users'		=> 'Standard $this->appName users'
	)
);

// Below are examples showing how privileges can be added to the newly created groups.
//
TTinstaller::addGroupRights(\$_id
	,'$this->appCode admin'
	,array(
		 'lurk'
		,'changeconfig'
	)
);
TTinstaller::addGroupRights(\$_id
	,'$this->appCode users'
	,array(
		 'lurk'
	)
);

// Below is an option to add an SQL installer file; just make sure the name is correct and uncomment the
// line below.
// The installer method supports SQL scripts as exported from SQL Workbench.
// Note: The table prefix taken from the configuration stored in the database (see above) will be added to the table names!
//
//TTinstaller::installTables('" . TT_SITE_TOP . "/tt-" . strtolower($this->appCode) . "/admin/$this->appCode.sql', false);

// Make sure the application is enabled
//
TTinstaller::enableApplication(\$_id);

// Finish the installer process.
//
TTloader::getClass('TTrundown.php', TT_ROOT);
";
		$this->createNewFile('/admin/install.php', $_fileContent);
	}

	/**
	 * Create this application's loader
	 * \author Oscar van Eijk, Oveas Functionality Provider
	 * \todo Calculate the the applic base ID 
	 */
	private function createLoader ()
	{
		$_fileContent = "<?php
		" . $this->createFileHeader() . "
Register::registerApp(TTloader::getCurrentAppName(), 0x02000001);
Register::registerLabels();

define ('$this->appCode"."_SO', TTloader::getCurrentAppUrl() . '/so');
define ('$this->appCode"."_BO', TTloader::getCurrentAppUrl() . '/bo');
define ('$this->appCode"."_UI', TTloader::getCurrentAppUrl() . '/ui');

if (!TTloader::getClass('" . strtolower($this->appCode) . "user', $this->appCode"."_BO)) {
	trigger_error('Error loading classfile $this->appCode"."User from' . $this->appCode"."_BO, E_USER_ERROR);
}
$this->appCode"."User::getReference();
";
		$this->createNewFile('/lib/' .strtolower($this->appCode) . '.loader.php', $_fileContent);
	}

	/**
	 * Create the default labels file for this application
	 */
	private function createLabels()
	{
		$_fileContent = "<?php
" . $this->createFileHeader() . "
\$_labels = array(
	 'Home'			=> 'Home'
	,'Username'		=> 'Username'
	,'Password' 	=> 'Password'
	,'Login'		=> 'Login'
	,'Login Form'	=> 'Login Form'
	,'Logout'		=> 'Logout' 
);
";
		$this->createNewFile('/lib/' .strtolower($this->appCode) . '.labels.php', $_fileContent);
	}

	/**
	 * Create the default messages file for this application
	 */
	private function createMessages()
	{
		$_fileContent = "<?php
		" . $this->createFileHeader() . "
\$_messages = array(
);
";
		$this->createNewFile('/lib/' .strtolower($this->appCode) . '.messages.php', $_fileContent);
	}

	
	/**
	 * Create the default stylesheet
	 */
	private function createStyleSheet()
	{
		$_fileContent = "/*
" . $this->createFileHeader(' *') . "
 */
@CHARSET \"UTF-8\";

body {
	font-family: sans-serif;
	font-size: 10pt;
}

.logo {
	text-align: center;
	font-style: italic;
	font-size: 24pt;
}

a {
	color: #02133D;
	text-decoration: none;
	font-weight: bold;
}

.sidebarContainer {
	float: left;
	width: 10em;
}

.sidebarContainer ul {
	list-style-type: none;
	padding-left: 1em;
}

.bodyContainer {
	margin-left: 10em;
}

.footerContainer {
	clear: left;
	text-align: center;
}

.footer {
	font-size: smaller;
}

legend {
	border: 1px solid #02133D;
	color: #B8152F;
	font-weight: bold;
	padding: 0.25em 0.5em 0.25em 0.5em;
	margin-left: 1em;
}

fieldset {
	border: 1px solid #02133D;
	display: inline-block;
	padding: 1px; /* Without padding, margins on legend don't work */
	margin: 0px;
	margin-top: 1em;
}

fieldset table {
	border: 0px;
	margin: 0.5em;
}

fieldset th {
	border: 0px;
}

fieldset div {
	padding: 0.5em 0.5em 0.5em 0.5em;
	border-bottom: 1px dotted #02133D;
}

fieldset div:last-of-type {
	border: 0px;	
}

label {
	display: block;
	color: #02133D;
	font-size: 90%;
	font-weight: bold;
	margin-bottom: 0.1em;
}

input[type=\"submit\"] {
	margin: 0em 0em 1em 1em;
}

.numeric {
	text-align: right;
}

table {
	border: 1px solid #02133D;
	border-collapse: collapse;
}

td {
	padding: 0.3em;
}

th {
	color: #02133D;
	border-bottom: 1px solid #02133D;
}

.shaded {
	background-color: #ddddff;
}

.itRed {
	color: #B8152F;
}

.itBlue {
	color: #02133D;
}

.warningMessages {
	font-weight: bold;
	padding: 0.5em;
	margin: 1em;
	color: #CC9900;
	background-color: #FFFF99;
	border: 1px solid #CC9900;
}

.infoMessages {
	font-weight: bold;
	padding: 0.5em;
	margin: 1em;
	color: #02133D;
	background-color: #66CCFF;
	border: 1px solid #02133D;
}

.successMessages {
	font-weight: bold;
	padding: 0.5em;
	margin: 1em;
	color: #005500;
	background-color: #99FF99;
	border: 1px solid #005500;
}

.errorMessages {
	font-weight: bold;
	padding: 0.5em;
	margin: 1em;
	color: #990000;
	background-color: #FF9999;
	border: 1px solid #990000;
}

.debugMessages {
	font-weight: bold;
	padding: 0.5em;
	margin: 1em;
	color: #333333;
	background-color: #CCCCCC;
	border: 1px solid #333333;
}

.ddMenu ul {
	display: none;
	position: absolute;
	left: 9em;
	top: 0px;
	padding-left: 0px;
	display: none;
	list-style-type: none;
	padding-left: 0px;
	border: solid #02133D;
	border-width: 1px 1px 1px 1px;
	background-color: #ffffff;
}

.subMenu>a:after {
	content: \"\\00a0>\";
}

.subMenu .subMenu ul {
	margin-top: -1px;
	margin-left: 0.2em;
}

.ddMenu {
	text-align: left;
}

.ddMenu > li {
	padding-bottom: 1em;
}

.ddMenu ul li {
	float: none;
	border-width: 0px;
	width: 11em;
	padding-left: 0.2em;
}

.ddMenu ul li a,li.ddMenuhover li a,li.ddMenuhover li.ddMenuhover li a {
	float: none;
	display: block;
	background: none;
	height: auto;
	padding-top: 0px;
}

.ddMenu ul li span,li.ddMenuhover li span,li.ddMenuhover li.ddMenuhover li span {
	float: none;
	display: block;
	background: none;
	height: auto;
	padding-top: 0px;
}

.ddMenu ul ul {
	left: 11em;
	top: 0
}

.subMenu .separator {
	border: solid #02133D;
	border-width: 1px 0px 0px 0px;
	margin: 0.3em 0em 0.3em 0em
}
";
		$this->createNewFile('/style/'.strtolower($this->appCode).'.css', $_fileContent);
	}

	
	/**
	 * Create the default mainpage
	 */
	private function createMainpage()
	{
		$_fileContent = "<?php
		" . $this->createFileHeader() . "
\$dispatcher = TT::factory('Dispatcher');
\$document   = TT::factory('Document', TT_UI_INC);
//\$document->enableTT_JS();

\$_hdr = new Container('div', '', array('class' => 'headerContainer'));
\$_bdy = new Container('div', '', array('class' => 'bodyContainer'));
\$_ftr = new Container('div', '', array('class' => 'footerContainer'));

TTCache::set(TTCACHE_OBJECTS, 'HeaderContainer', \$_hdr);
TTCache::set(TTCACHE_OBJECTS, 'BodyContainer', \$_bdy);
TTCache::set(TTCACHE_OBJECTS, 'FooterContainer', \$_ftr);


\$dispatcher->dispatch();

\$dispatcher->dispatch('$this->appName#".$this->appCode."_BO#".strtolower($this->appCode)."user#".$this->appCode."User#showMainMenu');
\$dispatcher->dispatch('$this->appName#".$this->appCode."_BO#".strtolower($this->appCode)."user#".$this->appCode."User#showUserMenu');

\$document->loadStyle(TTloader::getCurrentAppUrl() . '/style/".strtolower($this->appCode).".css');

\$document->addToContent(\$_hdr);
\$document->addToContent(\$_bdy);
\$document->addToContent(\$_ftr);

OutputHandler::outputRaw(\$document->showElement());
";
		$this->createNewFile('/ui/mainpage.php', $_fileContent);
	}

	/**
	 * Create the default login area
	 */
	private function createLoginArea()
	{
		$_fileContent = "<?php
" . $this->createFileHeader() . "
if (!TTloader::getClass('form')) {
	trigger_error('Error loading the Form class', E_USER_ERROR);
}

class LoginArea extends ContentArea
{
	public function loadArea(\$arg = null)
	{
		if (\$this->hasRight('readanonymous', TT_ID) === false) {
			return false;
		}

		\$_form = new Form(
			  array(
				 'application' => '$this->appName'
				,'include_path' => '".$this->appCode."_BO'
				,'class_file' => '".strtolower($this->appCode)."user'
				,'class_name' => '".$this->appCode."User'
				,'method_name' => 'doLogin'
			)
			, array(
				 'name' => 'loginForm'
			)
		);

		\$_liTable = new Container('table', '', array('style'=>'border: 0px; width: 100%;'));

		\$_rowU = \$_liTable->addContainer('row');
		\$_usrFld = \$_form->addField('text', 'usr', '', array('size' => 20));
		\$_usrLabel = \$this->trn('Username');
		\$_usrContnr = new Container('label', \$_usrLabel, array(), array('for' => &\$_usrFld));
		\$_usrCell = \$_rowU->addContainer('cell');
		\$_usrCell->setContent(\$_usrContnr);
		\$_rowU->addContainer('cell', \$_form->showField('usr'));

		\$_rowP = \$_liTable->addContainer('row');
		\$_pwdFld = \$_form->addField('password', 'pwd', '', array('size' => 15));
		\$_pwdLabel = \$this->trn('Password');
		\$_pwdContnr = new Container('label', \$_pwdLabel, array(), array('for' => &\$_pwdFld));
		\$_pwdCell = \$_rowP->addContainer('cell');
		\$_pwdCell->setContent(\$_pwdContnr);
		\$_rowP->addContainer('cell', \$_form->showField('pwd'));

		\$_rowS = \$_liTable->addContainer('row');
		\$_form->addField('submit', 'act', \$this->trn('Login'));
		\$_rowS->addContainer('cell'
			, \$_form->showField('act')
			, array('colspan'=>2
			, 'style'=>'text-align:center;')
		);

		\$_fldSet = new Container(
			  'fieldset'
			, \$_liTable->showElement()
			, array()
		);
		\$_fldSet->addContainer('legend', \$this->trn('Login Form'));

		\$_form->addToContent(\$_fldSet);

		\$this->contentObject = new Container('div', '', array('class' => 'loginArea'));
		\$this->contentObject->setContent(\$_form);
	}
}
";
		$this->createNewFile('/ui/login.php', $_fileContent);
	}

	/**
	 * Create the default user menu
	 */
	private function createUserMenu()
	{
		$_fileContent = "<?php
" . $this->createFileHeader() . "
class UsermenuArea extends ContentArea
{
	public function loadArea(\$arg = null)
	{
		\$this->contentObject = new Container('menu', '', array('class' => 'userMenu'));

		if (\$this->hasRight('readanonymous', TT_ID) === true) {
			\$_txt = \$this->trn('Login');
			\$_lnk = new Container('link', \$_txt);
			\$_lnk->setContainer(array(
					'dispatcher' => array(
						 'application' => '$this->appName'
						,'include_path' => '".$this->appCode."_BO'
						,'class_file' => '".strtolower($this->appCode)."user'
						,'class_name' => '".$this->appCode."User'
						,'method_name' => 'showLoginForm'
					)
				)
			);
			\$this->contentObject->addContainer('item', \$_lnk);
		}

		if (\$this->hasRight('readregistered', TT_ID) === true) {
			\$_txt = \$this->trn('Logout') . ' ' . TTCache::get(TTCACHE_OBJECTS, 'user')->getUsername();
			\$_lnk = new Container('link', \$_txt);
			\$_lnk->setContainer(array(
					'dispatcher' => array(
						 'application' => '$this->appName'
						,'include_path' => '".$this->appCode."_BO'
						,'class_file' => '".strtolower($this->appCode)."user'
						,'class_name' => '".$this->appCode."User'
						,'method_name' => 'logout'
					)
				)
			);
			\$this->contentObject->addContainer('item', \$_lnk);
		}
	}
}
";
		$this->createNewFile('/ui/usermenu.php', $_fileContent);
	}

	/**
	 * Create the default main menu
	 */
	private function createMainMenu()
	{
		$_fileContent = "<?php
" . $this->createFileHeader() . "
class MainmenuArea extends ContentArea
{
	public function loadArea(\$arg = null)
	{
		\$this->contentObject = new Container('menu', '', array('class' => 'mainMenu'));

		\$_txt = \$this->trn('Home');
		\$_lnk = new Container('link', \$_txt);
		\$_lnk->setContainer(array('href' => \$_SERVER['PHP_SELF']));
		\$this->contentObject->addContainer('item', \$_lnk);
	}
}
";
	$this->createNewFile('/ui/mainmenu.php', $_fileContent);
	}

	/**
	 * Create the default user class for this application
	 */
	private function createUserClass()
	{
		$_fileContent = "<?php
		" . $this->createFileHeader() . "
class ".$this->appCode."User extends User
{
	private static \$instance;

	private function __construct()
	{
		parent::construct();
		".$this->appCode."User::\$instance = \$this;
	}

	static public function getReference()
	{
		if (!".$this->appCode."User::\$instance instanceof ".$this->appCode."User) {
			".$this->appCode."User::\$instance = new self();
		}
		return ".$this->appCode."User::\$instance;
	}

	public function doLogin()
	{
		\$_form = TT::factory('FormHandler');

		if (!\$this->login(\$_form->get('usr'), \$_form->get('pwd'))) {
			\$this->signal();
		}
	}
	
	public function doLogout()
	{
		\$this->logout();
	}
	
	public function showLoginForm()
	{
		if ((\$_lgi = TTloader::getArea('login', ".$this->appCode."_UI)) !== null) {
			\$_lgi->addToDocument(TTCache::get(TTCACHE_OBJECTS, 'BodyContainer'));
		}
	}

	public function showMainMenu()
	{
		if ((\$_mnu = TTloader::getArea('mainmenu', ".$this->appCode."_UI)) !== null) {
			\$_mnu->addToDocument(TTCache::get(TTCACHE_OBJECTS, 'HeaderContainer'));
		}

	}

	public function showUserMenu()
	{
		if ((\$_mnu = TTloader::getArea('usermenu', ".$this->appCode."_UI)) !== null) {
			\$_mnu->addToDocument(TTCache::get(TTCACHE_OBJECTS, 'HeaderContainer'));
		}
	}
}
";
		$this->createNewFile('/bo/class.' .strtolower($this->appCode) . 'user.php', $_fileContent);
	}
}
